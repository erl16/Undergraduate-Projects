/* Name: Elizabeth Lundgren
Date: 10/31/19
Section: 6
Assignment: 5
Due Date: Nov 6, 2019
About this project: This assignment will consist of writing several functions that manipulate arrays or access data
from arrays, as well as a test program that will allow interactive testing of the array functions.
Assumptions: (write any assumptions made here (ex: assumes correct user input))

All work below was performed by Elizabeth Lundgren */

#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;


//announcing functions
void PrintArray(const int arr[], const int size);
void FillArray(int arr[], const int size);
void menu();

void Insert(int arr[], const int size, int x, int y);
void Delete(int arr[], const int size, int x);
bool Found(int arr[], const int size, int x);
void HowMany(int arr[], const int size, int x);

void Reverse(int arr[], const int size);
void Sort(int arr[], int size);
void TimesWhat(int arr[], int size, int x);
int Mean(int arr[], int size);
int Median(int arr[], int size);

//error message
void invalid();


int main() {
    /* Declare your array of size SIZE*/
    const int SIZE = 5;
    int arr[SIZE];

    /*You may assume the user will call Fill Array function first so that the array has data
     * in it to begin, or you may just initialize it to some starting data using an initializer list */

    /*Loop that presents user with menu options and calls the appropriate Array functions*/
    char user_input;

    menu();

    do {

        cin >> user_input;

        if ((user_input == 'P') || (user_input == 'p')){
            PrintArray(arr, SIZE);
        }
        else if ((user_input == 'F') || (user_input == 'f')) {
            FillArray(arr, SIZE);
        }
        else if ((user_input == 'I') || (user_input == 'i')) {
            //Error check, if out of bounds dont call
            int index; int number;
            cin >> index;
            if (index > (SIZE - 1) || index < 0)
            {
                invalid();
            }
            else
            {
                cin >> number;
                Insert(arr, SIZE, index, number);
            }
        }
        else if ((user_input == 'D') || (user_input == 'd')) {
            //Error check, if out of bounds dont call
            int index;
            cin >> index;
            if (index > (SIZE - 1) || index < 0)
            {
                invalid();
            }
            else{
                Delete(arr, SIZE, index);
            }
        }
        else if ((user_input == 'H') || (user_input == 'h')) {
            int find;
            cin >> find;
            HowMany(arr, SIZE, find);
        }
        else if ((user_input == 'R') || (user_input == 'r')) {
            Reverse(arr, SIZE);
        }
        else if ((user_input == 'S') || (user_input == 's')) {
            Sort(arr, SIZE);
        }
        else if ((user_input == 'T') || (user_input == 't')) {
            int multi;
            cin >> multi;
            TimesWhat(arr, SIZE, multi);
        }
        else if ((user_input == 'X') || (user_input == 'x')) {
            Mean(arr, SIZE);
        }
        else if ((user_input == 'Y') || (user_input == 'y')) {
            Median(arr, SIZE);
        }
        else if ((user_input == 'Z') || (user_input == 'z')) {
            int find;
            cin >> find;
            bool exists = Found(arr, SIZE, find);
            if (exists == true)
            {
                cout << "True" << endl;
            }
            else
            {
                cout << "False" << endl;
            }
        }
        else if ((user_input == 'M') || (user_input == 'm')) {
            menu();
        }

    } while ((user_input != 'Q') && (user_input != 'q'));

    return 0;
}


//function definition
void menu() {
    cout << "** Given features **" << endl;
    cout << "P	Print the array contents" << endl;
    cout << "F	Fill the array (user entry)" << endl;
    cout << "" << endl;
    cout << "** Function Tests **" << endl;
    cout << "I	Insert" << endl;
    cout << "D	Delete" << endl;
    cout << "H	How Many" << endl;
    cout << "R	Reverse" << endl;
    cout << "S	Sort" << endl;
    cout << "T	Times What" << endl;
    cout << "X	Mean" << endl;
    cout << "Y	Median" << endl;
    cout << "Z	Found" << endl;
    cout << "" << endl;
    cout << "** Other Options **" << endl;
    cout << "M	Print this menu" << endl;
    cout << "Q	Quit this program" << endl;
}


void Insert(int arr[], int size, int x, int y) {
    // Suppose the array "list" is {2, 4, 6, 8, 10, 12}

    //Insert(list, 6, 100, 3);	// insert the value 100 at index 3.

    // "list" is now {2, 4, 6, 100, 8, 10}


    for (int i = size - 1; i > y; i--) {
        arr[i] = arr[i - 1];
    }
    arr[y] = x;
}

void Delete(int arr[], int size, int x)
{
    /*This function should delete the value at the given index.
     * The remaining items in the array will need to shift over to fill the "empty" slot.
     * The last item in the array (now vacant) should be set to 0.
     * If the given index is out of bounds for the array, abort the function without deleting anything.
     * This function does not return a value. Sample call:*/

    // Suppose the array "list" is {2, 4, 6, 8, 10, 12 }
    // Delete(list, 6, 2);	// delete the value at index 2.
    // "list" is now {2, 4, 8, 10, 12, 0}

    //everything above x needs to move down
    for (int i = x ; i < size-1 ;i++){
            arr[i] = arr[i + 1];
        }
    if(int i = size-1){
        arr[x] = 0;}

    arr[size-1] = 0;
}

bool Found(int arr[], int size, int x) {
    /*This function should return true if the value was found in the array and false otherwise. Sample calls:
   // suppose "list" is {1, 3, 4, 6, 9, 10, 12, 0, 5, 2, -3}

   Found(list, 11, 4);   // this call should return the value true
   Found(list, 11, 8);   // this call should return the value false */
    int count = 0;
    for (int i = 0; i < size; i++)
    {
        if (arr[i] == x)
        {
            return true;
        }
    }
    return false;
}


void HowMany(int arr[], int size, int x) {
    /*This function should count the number of occurences of the given value in the array (i.e. how many times this value appears),
     * and then return the count. Sample call:
    // Suppose "list" is {2, 5, 5, 10, 5, 10, 3, 4, 5, 9, -1, 6}

    HowMany(list, 12, 5)  // returns how many times the value 5 appears
    //  in array "list".  This call returns 4
    //  because the value 5 appears 4 times. */
    int count = 0;
    for (int i = 0; i < size; i++)
    {
        if (arr[i] == x)
        {
            count++;
        }
    }
    cout << count;
}

void Reverse(int arr[], int size) {
    /* This function should reverse the order of the array's contents.
    No returned value. Sample call:
    // Suppose the array "list" is {2, 4, 6, 8, 10, 12}
     Reverse(list, 6);	// Reverse the array "list"*/
    int temp;

    for (int i = 0; i < (size/2); i++)
    {
        int temp;
        temp = arr[i];
        arr[i] = arr[size - i];
        arr[size - i] = temp;
    }
}

void Sort(int arr[], int size)
{
    /*This function should sort the array either ascending or descending, your choice.
     * This function does not return a value.
     * This function should actually sort the array itself, not just print out the contents in order. Sample call:
    // Suppose "list" is {4,3,7,1,2}

    Sort(list,5); // would make the array now contain: {1,2,3,4,7} */

    //sorting ascending
    bool swap = false;
    do {
        swap = false;
        for (int i = 0; i < size - 1; i++) {
            if (arr[i] > arr[i + 1])
            {
                int temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = temp;
                swap = true;
            }
        }
    } while (swap == true);

}

void TimesWhat(int arr[], int size, int x) {
    /*Write a function called TimesWhat that takes in three parameters:
    o	an integer array
    o	the size of the array
    o	the value to multiply by
    This function should multiply all elements in the array by the value passed into the function.
     The function should not reutrn a value. Sample call:
    // Suppose "list" is {2, 5, 5, 10, 5, 10}

    TimesWhat(list, 6, 5)

    // Would change "list" to:
    // {10, 25, 25, 50, 25, 50} */
    for (int i = 0; i < size - 1; i++){
        arr[i] = arr[i]*x;
    }
}


int Mean(int arr[], int size) {
    //page 206 in the textbook
    double total = 0; double average;

    for (int i = 0; i < size - 1; i++)
        total += arr[i];
    average = total / (size);

    return average;
}


int Median(int arr[], int size) {
    double median = (size - 1) / 2.0;
    cout << fixed; cout << showpoint; cout << setprecision(1);
    return median;
}

void invalid(){
    cout << "Invalid: Out of bounds" << endl;
}


//PrintArray Function, prints the contents of any integer array of any size separated by commas
void PrintArray(const int arr[], const int size)
{
    cout << "\nThe array:\n { ";
    for (int i = 0; i < size - 1; i++)	// for loop, prints each item (not last due to comma handling)
        cout << arr[i] << ", ";

    cout << arr[size - 1] << " }\n";	// prints last item , no comma
}

//FillArray Function
//Allows the user to enter data into any integer array of any size.
void FillArray(int arr[], const int size)
{
    cout << "Please enter " << size
         << " integers to load into the array\n> ";

    for (int i = 0; i < size; i++)
        cin >> arr[i];
}

